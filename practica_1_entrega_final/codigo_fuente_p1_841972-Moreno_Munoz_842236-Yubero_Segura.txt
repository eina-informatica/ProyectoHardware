	AREA codigo, CODE, READONLY
maxfilcol		EQU 7
minfilcol		EQU 0
	PRESERVE8
	EXPORT conecta_K_buscar_alineamiento_arm

conecta_K_buscar_alineamiento_arm
        mov ip, sp
        stmdb r13!, {r4-r8, fp, lr}
        sub fp, ip, #4
        ; comprobamos si la fila es válida
        cmp r1, #minfilcol
        blt fin ; si fila < 0
        cmp r1, #maxfilcol
        bge fin ; si fila >= 7
        ; comprobamos si la columna es válida
        cmp r2, #minfilcol
        blt fin ; si columna < 0
        cmp r2, #maxfilcol
        bge fin ; si columna >= 7
        ; si está la celda, obtenemos su valor
        mov r8,#0; inicializamos r8 a 0 (contador)
bucle
        cmp r8,#6
        beq fin
        add r6,r1,r1,LSL #1 
        add r7,r0,r6,LSL #1
        ldrb r7,[r7,r8]
        add r8,r8,#1 ;cont++
        ; comprobamos si está la celda
        cmp r7,r2
        bne bucle
        sub r8,r8,#1 ; cont-- para recuperar el valor correcto
        add r6,r1,r1,LSL #1
        add r7,r0,#0x0000002A ; buscar en la parte de abajo del tablero (donde se indexan los colores)
        add r7,r7,r6,LSL #1
        ldrb r7,[r7,r8] ; valor del color
        and r7,r7,#0x03
        cmp r7,r3 ; comparamos el color con el parámetro
        bne fin
        ldrsb r4, [fp, #4] ; r4 - deltas_fila[i]
        add r1, r1, r4 ; r1 - fila + deltas_fila[i]
        ldrsb r5, [fp, #8] ; r5 - deltas_columna[i]
        add r2, r2, r5 ; r2 - columna + deltas_columna[i]
        stmdb r13!, {r4-r5} ; se apilan los deltas para la llamada recursiva
        bl conecta_K_buscar_alineamiento_arm
        add sp, sp, #8
        add r0, r0, #1 ; r0 - r0 + 1 (return 1 + resultado función)
        ldmia r13!, {r4-r8, fp, lr}
        bx r14
fin
        mov r0, #0 ; r0 - 0 (return 0)
        ldmia r13!, {r4-r8, fp, lr}
        bx r14
		END	
		
		
		
		
		
	AREA codigo, CODE, READONLY
	PRESERVE8
	EXPORT conecta_K_buscar_alineamiento_arm_opt
		
conecta_K_buscar_alineamiento_arm_opt
        mov ip, sp
        stmdb r13!, {r4-r9, fp, lr}
        sub fp, ip, #4
        ; comprobamos si la fila es válida
		ldrsb r4, [fp, #4] ; r4  deltas_fila[i]
		ldrsb r5, [fp, #8] ; r5  deltas_columna[i]
		mov r9, #0 ; r9  long_linea = 0
bucle_ini
		mov r8,#0; inicializamos r8 a 0 (contador)
		cmp r1, #0
        blt fin ; si fila < 0
        cmp r1, #7
        bge fin ; si fila >= 7
        ; comprobamos si la columna es válida
        cmp r2, #0
        blt fin ; si columna < 0
        cmp r2, #7
        bge fin ; si columna >= 7
bucle
        ; si está la celda, obtenemos su valor
        cmp r8,#6
        beq fin
        add r6,r1,r1,LSL #1 
        add r7,r0,r6,LSL #1
        ldrb r7,[r7,r8]
        add r8,r8,#1 ;cont++
        ; comprobamos si está la celda
        cmp r7,r2
        bne bucle
        sub r8,r8,#1 ; cont-- para recuperar el valor correcto
        add r6,r1,r1,LSL #1
        add r7,r0,#0x0000002A ; buscar en la parte de abajo del tablero (dnde se indexan los colores)
        add r7,r7,r6,LSL #1
        ldrb r7,[r7,r8] ; valor del color
        and r7,r7,#0x03
        cmp r7,r3 ; comparamos el color con el parámetro
        bne fin
		add r9,r9,#1 ; long_linea++
        add r1, r1, r4 ; r1 - fila + deltas_fila[i]
        add r2, r2, r5 ; r2 - columna + deltas_columna[i]
		b bucle_ini
fin
        mov r0, r9 ; r0 - 0 (return 0)
        ldmia r13!, {r4-r9, fp, lr}
        bx r14
		END
		
		
		
		
		
		AREA datos, DATA, READWRITE
dfila 	DCB 0x00, 0xFF, 0xFF, 0x01
dcolum	DCB 0xFF, 0x00, 0xFF, 0xFF
ksize   EQU 0x4
		AREA codigo, CODE, READONLY
		PRESERVE8
		IMPORT conecta_K_buscar_alineamiento_arm_opt
		EXPORT conecta_K_hay_linea_arm_arm

conecta_K_hay_linea_arm_arm
    mov ip, sp
    stmdb r13!, {r4-r10, fp, lr}
    sub fp, ip, #4
    ; copia de parámetros
    mov r4, r0 ; r4 cuadricula
    mov r5, r1 ; r5 fila
    mov r6, r2 ; r6 columna
    mov r7, r3 ; r7 color
    mov r8, #0 ; r8 i = 0
    mov r9, #0 ; r9 linea = false
    mov r10, #0 ; r10 long_linea = 0
bucle
    cmp r8, #4 ; i < numDeltas
    bgt fin
    cmp r9, #1 ; linea == true
    beq fin
    ldr r0, =dfila ; r0 dfila
    ldrsb r1, [r0, r8] ; r1 dfila[i]
    ldr r0, =dcolum ; r1 dcolum
    ldrsb r2, [r0, r8] ; r2 dcolum[i]
    stmdb r13!,{r1-r2} ; apilamos dfila[i] y dcolum[i] para buscar alineamiento
    mov r0, r4 ; r0 cuadricula
    mov r1, r5 ; r1 fila
    mov r2, r6 ; r2 columna
    mov r3, r7 ; r3 color
    bl conecta_K_buscar_alineamiento_arm_opt
    ldmia r13!,{r1-r2} ; desapilamos dfila[i] y dcolum[i]
    mov r10, r0 ; long_linea = long_linea + long_linea_actual
    cmp r10, #ksize ; long_linea == K_size
    movge r9, #1 ; linea = true
    bge fin
    rsb r1 ,r1, #0 ; dfila[i] = -dfila[i]
    rsb r2 ,r2, #0 ; dcolum[i] = -dcolum[i]
    stmdb r13!,{r1-r2} ; apilamos -dfila[i] y -dcolum[i] para buscar alineamiento
    mov r0, r4 ; r0 cuadricula
	add r1, r5, r1 ; r1 fila + (-deltas_fila[i])
    add r2, r6, r2 ; r2 columna + (-deltas_columna[i])
    mov r3, r7 ;  r3 color
	bl conecta_K_buscar_alineamiento_arm_opt ; llamada con la inversa
    ldmia r13!,{r1-r2} ; desapilamos dfila[i] y dcolum[i]
    add r10, r10, r0 ; long_linea = long_linea + long_linea_actual
    cmp r10, #4 ; long_linea == K_size
    movge r9, #1 ; linea = true
    add r8, r8, #1 ; i = i + 1
    b bucle
fin
    mov r0, r9 ; r0  linea
    ldmia r13!, {r4-r10, fp, lr}
    bx r14
	END		
	
	
	
	
	
	AREA datos, DATA, READWRITE
dfila 	DCB 0x00, 0xFF, 0xFF, 0x01
dcolum	DCB 0xFF, 0x00, 0xFF, 0xFF
ksize   EQU 0x4
		AREA codigo, CODE, READONLY
		PRESERVE8
		IMPORT conecta_K_buscar_alineamiento_c
		EXPORT conecta_K_hay_linea_arm_c

conecta_K_hay_linea_arm_c
    mov ip, sp
    stmdb r13!, {r4-r10, fp, lr}
    sub fp, ip, #4
    ; copia de parámetros
    mov r4, r0 ; r4 cuadricula
    mov r5, r1 ; r5 fila
    mov r6, r2 ; r6 columna
    mov r7, r3 ; r7 color
    mov r8, #0 ; r8 i = 0
    mov r9, #0 ; r9 linea = false
    mov r10, #0 ; r10 long_linea = 0
bucle
    cmp r8, #4 ; i < numDeltas
    bgt fin
    cmp r9, #1 ; linea == True
    beq fin
    ldr r0, =dfila ; r0 dfila
    ldrsb r1, [r0, r8] ; r1 dfila[i]
    ldr r0, =dcolum ; r1 dcolum
    ldrsb r2, [r0, r8] ; r2 dcolum[i]
    stmdb r13!,{r1-r2} ; apilamos dfila[i] y dcolum[i] para buscar alineamiento
    mov r0, r4 ; r0 cuadrícula
    mov r1, r5 ; r1 fila
    mov r2, r6 ; r2 columna
    mov r3, r7 ; r3 color
    bl conecta_K_buscar_alineamiento_c
    ldmia r13!,{r1-r2} ; desapilamos dfila[i] y dcolum[i]
    mov r10, r0 ; long_linea = long_linea + long_linea_actual
    cmp r10, #ksize ; long_linea == K_size
    movge r9, #1 ; linea = true
    bge fin
    rsb r1 ,r1, #0 ; dfila[i] = -dfila[i]
    rsb r2 ,r2, #0 ; dcolum[i] = -dcolum[i]
    stmdb r13!,{r1-r2} ; apilamos -dfila[i] y -dcolum[i] para buscar alineamiento
    mov r0, r4 ; r0 cuadricula
	add r1, r5, r1 ; r1 fila + (-deltas_fila[i])
    add r2, r6, r2 ; r2 columna + (-deltas_columna[i])
    mov r3, r7 ; r3 color
	bl conecta_K_buscar_alineamiento_c ; llamada con la inversa
    ldmia r13!,{r1-r2} ; desapilamos dfila[i] y dcolum[i]
    add r10, r10, r0 ; long_linea = long_linea + long_linea_actual
    cmp r10, #4 ; long_linea == K_size
    movge r9, #1 ; linea = true
    add r8, r8, #1 ; i = i + 1
    b bucle
fin
    mov r0, r9 ; r0 linea
    ldmia r13!, {r4-r10, fp, lr}
    bx r14
	END
